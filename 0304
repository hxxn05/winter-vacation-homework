/////////////////////////////ÎßàÏä§ÌÑ∞ ÏΩîÎìú/////////////////////////////

# include <SPI.h>

const int SS_PIN = 53;

//0xAA  Mode-manual mode_car  channel1_H  channel1_L  channel2_H  channel2_L  channel3_H  channel3_L  channel4_H  channel4_L  CRC

struct Protocol 
{
  byte header = 0xAA;    // ÏãúÏûë Î∞îÏù¥Ìä∏
  byte mode;             // Mode-manual/mode_car
  byte ch1_H;           // channel1 ÏÉÅÏúÑ Î∞îÏù¥Ìä∏
  byte ch1_L;           // channel1 ÌïòÏúÑ Î∞îÏù¥Ìä∏
  byte ch2_H;           // channel2 ÏÉÅÏúÑ Î∞îÏù¥Ìä∏
  byte ch2_L;           // channel2 ÌïòÏúÑ Î∞îÏù¥Ìä∏
  byte ch3_H;           // channel3 ÏÉÅÏúÑ Î∞îÏù¥Ìä∏
  byte ch3_L;           // channel3 ÌïòÏúÑ Î∞îÏù¥Ìä∏
  byte ch4_H;           // channel4 ÏÉÅÏúÑ Î∞îÏù¥Ìä∏
  byte ch4_L;           // channel4 ÌïòÏúÑ Î∞îÏù¥Ìä∏
  byte crc;             // CRC Ï≤¥ÌÅ¨ÏÑ¨
};

Protocol sendProtocol;
Protocol receiveProtocol;

// 16ÎπÑÌä∏ Ï±ÑÎÑêÍ∞íÏùÑ ÏÉÅÏúÑ/ÌïòÏúÑ Î∞îÏù¥Ìä∏Î°ú Î∂ÑÎ¶¨ÌïòÎäî Ìï®Ïàò
void setChannelValue(int channelValue, byte &highByte, byte &lowByte) 
{
  highByte = (channelValue >> 8) & 0xFF;
  lowByte = channelValue & 0xFF;
}

// CRC Í≥ÑÏÇ∞ Ìï®Ïàò
byte calculateCRC(Protocol &p) 
{
  byte crc = p.header ^ p.mode;
  crc ^= p.ch1_H ^ p.ch1_L;
  crc ^= p.ch2_H ^ p.ch2_L;
  crc ^= p.ch3_H ^ p.ch3_L;
  crc ^= p.ch4_H ^ p.ch4_L;
  return crc;
}

void setup() 
{
  Serial.begin(9600);
  pinMode(SS_PIN, OUTPUT);
  digitalWrite(SS_PIN, HIGH);
  SPI.begin();
  SPI.setClockDivider(SPI_CLOCK_DIV8);
}

void sendData() 
{
  // ÏòàÏãú Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
  sendProtocol.mode = 0x01;  // manual mode

  // Ï±ÑÎÑêÍ∞í ÏÑ§Ï†ï (ÏòàÏãú: 16ÎπÑÌä∏ Í∞í)
  setChannelValue(1500, sendProtocol.ch1_H, sendProtocol.ch1_L);  // Ï±ÑÎÑê1: 1500
  setChannelValue(1200, sendProtocol.ch2_H, sendProtocol.ch2_L);  // Ï±ÑÎÑê2: 1000
  setChannelValue(2000, sendProtocol.ch3_H, sendProtocol.ch3_L);  // Ï±ÑÎÑê3: 2000
  setChannelValue(1750, sendProtocol.ch4_H, sendProtocol.ch4_L);  // Ï±ÑÎÑê4: 1750

  // CRC Í≥ÑÏÇ∞
  sendProtocol.crc = calculateCRC(sendProtocol);

  // Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÏùëÎãµ ÏàòÏã†
  digitalWrite(SS_PIN, LOW);
  delayMicroseconds(100);

  receiveProtocol.header = SPI.transfer(sendProtocol.header);
  delayMicroseconds(10);
  receiveProtocol.mode = SPI.transfer(sendProtocol.mode);
  delayMicroseconds(10);
  receiveProtocol.ch1_H = SPI.transfer(sendProtocol.ch1_H);
  delayMicroseconds(10);
  receiveProtocol.ch1_L = SPI.transfer(sendProtocol.ch1_L);
  delayMicroseconds(10);
  receiveProtocol.ch2_H = SPI.transfer(sendProtocol.ch2_H);
  delayMicroseconds(10);
  receiveProtocol.ch2_L = SPI.transfer(sendProtocol.ch2_L);
  delayMicroseconds(10);
  receiveProtocol.ch3_H = SPI.transfer(sendProtocol.ch3_H);
  delayMicroseconds(10);
  receiveProtocol.ch3_L = SPI.transfer(sendProtocol.ch3_L);
  delayMicroseconds(10);
  receiveProtocol.ch4_H = SPI.transfer(sendProtocol.ch4_H);
  delayMicroseconds(10);
  receiveProtocol.ch4_L = SPI.transfer(sendProtocol.ch4_L);
  delayMicroseconds(10);
  receiveProtocol.crc = SPI.transfer(sendProtocol.crc);
  delayMicroseconds(10);  
  digitalWrite(SS_PIN, HIGH);
  delayMicroseconds(100);  

  // Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
  Serial.println("Sent data:");
  printProtocol(sendProtocol);

  Serial.println("Received response:");
  printProtocol(receiveProtocol);
}

void printProtocol(Protocol &p) 
{
  Serial.print("Header: 0x"); Serial.print(p.header, HEX);
  Serial.print(" Mode: 0x"); Serial.print(p.mode, HEX);
  Serial.print(" CH1: "); Serial.print((p.ch1_H << 8) | p.ch1_L);
  Serial.print(" CH2: "); Serial.print((p.ch2_H << 8) | p.ch2_L);
  Serial.print(" CH3: "); Serial.print((p.ch3_H << 8) | p.ch3_L);
  Serial.print(" CH4: "); Serial.print((p.ch4_H << 8) | p.ch4_L);
  Serial.print(" CRC: 0x"); Serial.println(p.crc, HEX);
}

void loop() 
{
  sendData();
  delay(1000);
}

```

/////////////////////////////Ïä¨Î†àÏù¥Î∏å ÏΩîÎìú/////////////////////////////

#include <SPI.h>

const int SS_PIN = 53;

struct Protocol 
{
  byte header;    
  byte mode;      
  byte ch1_H;     
  byte ch1_L;     
  byte ch2_H;     
  byte ch2_L;     
  byte ch3_H;     
  byte ch3_L;     
  byte ch4_H;     
  byte ch4_L;     
  byte crc;       
};

Protocol receiveProtocol;
Protocol responseProtocol;
volatile byte byteCounter = 0;
volatile boolean newData = false;

// CRC Í≥ÑÏÇ∞ Ìï®Ïàò
byte calculateCRC(Protocol &p) 
{
  byte crc = p.header ^ p.mode;
  crc ^= p.ch1_H ^ p.ch1_L;
  crc ^= p.ch2_H ^ p.ch2_L;
  crc ^= p.ch3_H ^ p.ch3_L;
  crc ^= p.ch4_H ^ p.ch4_L;
  return crc;
}

void setup() 
{
  Serial.begin(9600);
  // SPI Ïä¨Î†àÏù¥Î∏å ÌïÄ ÏÑ§Ï†ï
  pinMode(MISO, OUTPUT);
  pinMode(MOSI, INPUT);
  pinMode(SCK, INPUT);
  pinMode(SS_PIN, INPUT);
 
   // ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  responseProtocol.header = 0xBB;
  responseProtocol.mode = 0x02;
  responseProtocol.ch1_H = 0x05;
  responseProtocol.ch1_L = 0xDC;
  responseProtocol.ch2_H = 0x04;
  responseProtocol.ch2_L = 0xB0;
  responseProtocol.ch3_H = 0x07;
  responseProtocol.ch3_L = 0xD0;
  responseProtocol.ch4_H = 0x06;
  responseProtocol.ch4_L = 0xD6;
  responseProtocol.crc = calculateCRC(responseProtocol);

  // SPI Ïä¨Î†àÏù¥Î∏å ÏÑ§Ï†ï
  SPCR = 0;
  SPCR |= (1 << SPE);    // SPI ÌôúÏÑ±Ìôî
  SPCR |= (1 << SPIE);   // SPI Ïù∏ÌÑ∞ÎüΩÌä∏ ÌôúÏÑ±Ìôî
  SPCR &= ~(1 << DORD);  // MSB first
  SPCR &= ~(1 << MSTR);  // Slave Î™®Îìú
  SPCR &= ~(1 << CPOL);  // Clock Polarity: 0
  SPCR &= ~(1 << CPHA);  // Clock Phase: 0
  // Ï≤´ ÏùëÎãµ Î∞îÏù¥Ìä∏ Ï§ÄÎπÑ
  SPDR = responseProtocol.header;
}

// SPI Ïù∏ÌÑ∞ÎüΩÌä∏ Ìï∏Îì§Îü¨
ISR(SPI_STC_vect) 
{
  static byte nextByte = responseProtocol.header;
  byte receivedByte = SPDR;

  // Îã§Ïùå Ï†ÑÏÜ°Ìï† Î∞îÏù¥Ìä∏ ÏÑ§Ï†ï
  switch(byteCounter) 
  {
    case 0:
      if(receivedByte == 0xAA) 
      {
        nextByte = responseProtocol.mode;
        byteCounter++;
      }
      break;

    case 1:
      nextByte = responseProtocol.ch1_H;
      byteCounter++;
      break;

    case 2:
      nextByte = responseProtocol.ch1_L;
      byteCounter++;
      break;
      
    case 3:
      nextByte = responseProtocol.ch2_H;
      byteCounter++;
      break;

    case 4:
      nextByte = responseProtocol.ch2_L;
      byteCounter++;
      break;

    case 5:
      nextByte = responseProtocol.ch3_H;
      byteCounter++;
      break;

    case 6:
      nextByte = responseProtocol.ch3_L;
      byteCounter++;
      break;

    case 7:
      nextByte = responseProtocol.ch4_H;
      byteCounter++;
      break;

    case 8:
      nextByte = responseProtocol.ch4_L;
      byteCounter++;
      break;

    case 9:
      nextByte = responseProtocol.crc;
      byteCounter = 0;
      newData = true;
      break;

    default:
      nextByte = responseProtocol.header;
      byteCounter = 0;
      break;
  }

  // Îã§Ïùå Î∞îÏù¥Ìä∏Î•º Ï†ÑÏÜ° Î≤ÑÌçºÏóê ÏÑ§Ï†ï
  SPDR = nextByte;
}

void loop() 
{
  if(newData) 
  {
    Serial.println("Data exchanged");
    newData = false;
  }
}
```

---

# Í≤∞Í≥º

![image.png](attachment:0bf41ce8-f642-466e-8b8b-bcc737da05ad:image.png)

![image.png](attachment:272443bf-5229-46d2-b168-1579d16dab04:image.png)

---

# ÏΩîÎìú Î∂ÑÏÑù

## üî∏ **ÌîÑÎ°úÌÜ†ÏΩú Íµ¨Ï°∞Ï≤¥ (`Protocol`)**

```
| Header (1) | Mode (1) | CH1_H (1) | CH1_L (1) | CH2_H (1) | CH2_L (1) | CH3_H (1) | CH3_L (1) | CH4_H (1) | CH4_L (1) | CRC (1) |

```

- **Header (1 Byte)**: ÏãúÏûë Î∞îÏù¥Ìä∏ (`ÎßàÏä§ÌÑ∞: 0xAA`, `Ïä¨Î†àÏù¥Î∏å: 0xBB`)
- **Mode (1 Byte)**: Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î™®Îìú
- **CHx_H / CHx_L (Í∞Å 1 Byte)**: 16ÎπÑÌä∏ Ï±ÑÎÑê Í∞íÏùÑ ÏÉÅÏúÑ/ÌïòÏúÑ Î∞îÏù¥Ìä∏Î°ú ÎÇòÎàî
- **CRC (1 Byte)**: Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ±ÏùÑ ÏúÑÌïú Ï≤¥ÌÅ¨ÏÑ¨

---

## üî∏ **ÎßàÏä§ÌÑ∞ ÏΩîÎìú Ï£ºÏöî Í∏∞Îä•**

1. **Ï¥àÍ∏∞Ìôî (`setup`)**
    
    ```cpp
    pinMode(SS_PIN, OUTPUT);
    digitalWrite(SS_PIN, HIGH);  // Í∏∞Î≥∏: ÎπÑÌôúÏÑ±Ìôî
    SPI.begin();
    SPI.setClockDivider(SPI_CLOCK_DIV8);
    ```
    
    - `SS_PIN`: **Ïä¨Î†àÏù¥Î∏å ÏÑ†ÌÉù ÌïÄ** (LOW Ïãú ÌÜµÏã† ÏãúÏûë)
    - **SPI ÏÜçÎèÑ ÏÑ§Ï†ï**: `SPI_CLOCK_DIV8`
2. **Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ (`sendData`)**
    
    ```cpp
    sendProtocol.mode = 0x01;
    setChannelValue(1500, sendProtocol.ch1_H, sendProtocol.ch1_L);
    sendProtocol.crc = calculateCRC(sendProtocol);
    ```
    
    - **Mode** Î∞è **Ï±ÑÎÑê Îç∞Ïù¥ÌÑ∞** ÏÑ§Ï†ï
    - **CRC Í≥ÑÏÇ∞** (XOR Ïó∞ÏÇ∞)

3. **Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° Î∞è ÏùëÎãµ ÏàòÏã†**
    
    ```cpp
    digitalWrite(SS_PIN, LOW);  // SPI ÌôúÏÑ±Ìôî
    receiveProtocol.header = SPI.transfer(sendProtocol.header);
    receiveProtocol.mode = SPI.transfer(sendProtocol.mode);
    ...
    digitalWrite(SS_PIN, HIGH); // SPI ÎπÑÌôúÏÑ±Ìôî
    ```
    
    - `SPI.transfer()`Î°ú **Î∞îÏù¥Ìä∏ Ï†ÑÏÜ° Î∞è ÏùëÎãµ ÏàòÏã†**
    - Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÌõÑ `SS_PIN`ÏùÑ **HIGH**Î°ú ÌïòÏó¨ ÌÜµÏã† Ï¢ÖÎ£å

4. **Í≤∞Í≥º Ï∂úÎ†• (`printProtocol`)**
    
    ```cpp
    Serial.print("Header: 0x"); Serial.print(p.header, HEX);
    Serial.print(" Mode: 0x"); Serial.print(p.mode, HEX);
    Serial.print(" CH1: "); Serial.print((p.ch1_H << 8) | p.ch1_L);
    Serial.print(" CRC: 0x"); Serial.println(p.crc, HEX);
    ```
    
    - ÏÜ°Ïã† Î∞è ÏàòÏã†Ìïú Îç∞Ïù¥ÌÑ∞ ÎÇ¥Ïö©ÏùÑ **ÏãúÎ¶¨Ïñº Î™®ÎãàÌÑ∞**Ïóê Ï∂úÎ†•

---

## üî∏ **Ïä¨Î†àÏù¥Î∏å ÏΩîÎìú Ï£ºÏöî Í∏∞Îä•**

1. **Ï¥àÍ∏∞Ìôî (`setup`)**
    
    ```cpp
    pinMode(MISO, OUTPUT);
    SPCR |= (1 << SPE) | (1 << SPIE);  // SPI ÌôúÏÑ±Ìôî + Ïù∏ÌÑ∞ÎüΩÌä∏ ÌôúÏÑ±Ìôî
    SPCR &= ~(1 << MSTR);              // Ïä¨Î†àÏù¥Î∏å Î™®Îìú
    SPDR = responseProtocol.header;
    
    ```
    
    - **Ïä¨Î†àÏù¥Î∏å Î™®Îìú** ÏÑ§Ï†ï Î∞è **SPI Ïù∏ÌÑ∞ÎüΩÌä∏ ÌôúÏÑ±Ìôî**
    - **Ï≤´ Î≤àÏß∏ ÏùëÎãµ Î∞îÏù¥Ìä∏** Ï§ÄÎπÑ
2. **SPI Ïù∏ÌÑ∞ÎüΩÌä∏ Ìï∏Îì§Îü¨ (`ISR`)**
    
    ```cpp
    ISR(SPI_STC_vect) 
    {
      byte receivedByte = SPDR;
      switch(byteCounter) 
      {
        case 0:
          if(receivedByte == 0xAA) byteCounter++;
          break;
        case 9:
          byteCounter = 0;
          newData = true;
          break;
        default:
          byteCounter++;
          break;
      }
      SPDR = nextByte;
    }
    ```
    
    - **Î∞îÏù¥Ìä∏ ÏàòÏã† ÌõÑ** Îã§Ïùå ÏùëÎãµ Î∞îÏù¥Ìä∏ Ï§ÄÎπÑ
    - ÎßàÏßÄÎßâ Î∞îÏù¥Ìä∏ÍπåÏßÄ ÏàòÏã† Ïãú `newData` ÌîåÎûòÍ∑∏ ÌôúÏÑ±Ìôî

3. **Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (`loop`)**
    
    ```cpp
    void loop() 
    {
      if(newData) 
      {
        Serial.println("Data exchanged");
        newData = false;
      }
    }
    ```
    
    - Îç∞Ïù¥ÌÑ∞Í∞Ä ÏôÑÏ†ÑÌûà ÏàòÏã†ÎêòÏóàÏùÑ Îïå ÏãúÎ¶¨Ïñº Î™®ÎãàÌÑ∞Ïóê Ï∂úÎ†•

---
